// Code generated by protoc-gen-go.
// source: job_desc.proto
// DO NOT EDIT!

package sirius

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type JobDescriptor_JobState int32

const (
	JobDescriptor_NEW       JobDescriptor_JobState = 0
	JobDescriptor_CREATED   JobDescriptor_JobState = 1
	JobDescriptor_RUNNING   JobDescriptor_JobState = 2
	JobDescriptor_COMPLETED JobDescriptor_JobState = 3
	JobDescriptor_FAILED    JobDescriptor_JobState = 4
	JobDescriptor_ABORTED   JobDescriptor_JobState = 5
	JobDescriptor_UNKNOWN   JobDescriptor_JobState = 6
)

var JobDescriptor_JobState_name = map[int32]string{
	0: "NEW",
	1: "CREATED",
	2: "RUNNING",
	3: "COMPLETED",
	4: "FAILED",
	5: "ABORTED",
	6: "UNKNOWN",
}
var JobDescriptor_JobState_value = map[string]int32{
	"NEW":       0,
	"CREATED":   1,
	"RUNNING":   2,
	"COMPLETED": 3,
	"FAILED":    4,
	"ABORTED":   5,
	"UNKNOWN":   6,
}

func (x JobDescriptor_JobState) Enum() *JobDescriptor_JobState {
	p := new(JobDescriptor_JobState)
	*p = x
	return p
}
func (x JobDescriptor_JobState) String() string {
	return proto.EnumName(JobDescriptor_JobState_name, int32(x))
}
func (x *JobDescriptor_JobState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(JobDescriptor_JobState_value, data, "JobDescriptor_JobState")
	if err != nil {
		return err
	}
	*x = JobDescriptor_JobState(value)
	return nil
}
func (JobDescriptor_JobState) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 0} }

type JobDescriptor struct {
	Uuid             *string                 `protobuf:"bytes,1,req,name=uuid" json:"uuid,omitempty"`
	Name             *string                 `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	State            *JobDescriptor_JobState `protobuf:"varint,3,opt,name=state,enum=sirius.JobDescriptor_JobState" json:"state,omitempty"`
	RootTask         *TaskDescriptor         `protobuf:"bytes,4,req,name=root_task" json:"root_task,omitempty"`
	OutputIds        [][]byte                `protobuf:"bytes,5,rep,name=output_ids" json:"output_ids,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *JobDescriptor) Reset()                    { *m = JobDescriptor{} }
func (m *JobDescriptor) String() string            { return proto.CompactTextString(m) }
func (*JobDescriptor) ProtoMessage()               {}
func (*JobDescriptor) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *JobDescriptor) GetUuid() string {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return ""
}

func (m *JobDescriptor) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *JobDescriptor) GetState() JobDescriptor_JobState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return JobDescriptor_NEW
}

func (m *JobDescriptor) GetRootTask() *TaskDescriptor {
	if m != nil {
		return m.RootTask
	}
	return nil
}

func (m *JobDescriptor) GetOutputIds() [][]byte {
	if m != nil {
		return m.OutputIds
	}
	return nil
}

func init() {
	proto.RegisterType((*JobDescriptor)(nil), "sirius.JobDescriptor")
	proto.RegisterEnum("sirius.JobDescriptor_JobState", JobDescriptor_JobState_name, JobDescriptor_JobState_value)
}

func init() { proto.RegisterFile("job_desc.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 243 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x8d, 0x3b, 0x4f, 0xc3, 0x30,
	0x14, 0x85, 0xc9, 0xb3, 0xe4, 0xf6, 0x41, 0xe4, 0x01, 0x59, 0x0c, 0x28, 0xea, 0x54, 0x06, 0x32,
	0xf4, 0x1f, 0x84, 0xd6, 0xa0, 0x42, 0x71, 0x50, 0x68, 0xd5, 0x31, 0x4a, 0x48, 0x06, 0x83, 0xc0,
	0x91, 0x1f, 0x3f, 0x1f, 0x09, 0x5f, 0x21, 0x50, 0xbb, 0xf9, 0xbb, 0xe7, 0xf8, 0x3b, 0x30, 0x7b,
	0x97, 0x6d, 0xdd, 0xf5, 0xfa, 0x2d, 0x1f, 0x94, 0x34, 0x92, 0xc4, 0x5a, 0x28, 0x61, 0xf5, 0xd5,
	0x85, 0x69, 0xf4, 0xc7, 0x51, 0x30, 0xff, 0xf6, 0x60, 0xfa, 0x28, 0xdb, 0xb5, 0xbb, 0x28, 0x31,
	0x18, 0xa9, 0xc8, 0x04, 0x42, 0x6b, 0x45, 0x47, 0xbd, 0xcc, 0x5f, 0x24, 0x48, 0x5f, 0xcd, 0x67,
	0x4f, 0xfd, 0xcc, 0x73, 0x74, 0x0b, 0x91, 0x36, 0x8d, 0xe9, 0x69, 0xe0, 0x70, 0xb6, 0xbc, 0xce,
	0x7f, 0xb5, 0xf9, 0x89, 0x01, 0xe9, 0x15, 0x5b, 0xe4, 0x06, 0x12, 0x25, 0xa5, 0xa9, 0x71, 0x94,
	0x86, 0xce, 0x37, 0x5e, 0x5e, 0xfe, 0x7d, 0xd9, 0xb9, 0xdb, 0xd1, 0x2a, 0x01, 0x90, 0xd6, 0x0c,
	0xd6, 0xd4, 0xa2, 0xd3, 0x34, 0xca, 0x82, 0xc5, 0x64, 0xde, 0xc2, 0xf9, 0xbf, 0x6a, 0x04, 0x01,
	0x67, 0x87, 0xf4, 0x8c, 0x8c, 0x61, 0xb4, 0xaa, 0x58, 0xb1, 0x63, 0xeb, 0xd4, 0x43, 0xa8, 0xf6,
	0x9c, 0x6f, 0xf8, 0x43, 0xea, 0x93, 0x29, 0x24, 0xab, 0xf2, 0xf9, 0x65, 0xcb, 0x30, 0x0b, 0x9c,
	0x30, 0xbe, 0x2f, 0x36, 0x5b, 0xf7, 0x0e, 0xb1, 0x57, 0xdc, 0x95, 0x15, 0x06, 0x11, 0xc2, 0x9e,
	0x3f, 0xf1, 0xf2, 0xc0, 0xd3, 0xf8, 0x27, 0x00, 0x00, 0xff, 0xff, 0x75, 0x66, 0x60, 0x9f, 0x29,
	0x01, 0x00, 0x00,
}
