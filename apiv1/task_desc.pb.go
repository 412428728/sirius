// Code generated by protoc-gen-go.
// source: task_desc.proto
// DO NOT EDIT!

package sirius

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TaskDescriptor_TaskState int32

const (
	TaskDescriptor_CREATED   TaskDescriptor_TaskState = 0
	TaskDescriptor_BLOCKING  TaskDescriptor_TaskState = 1
	TaskDescriptor_RUNNABLE  TaskDescriptor_TaskState = 2
	TaskDescriptor_ASSIGNED  TaskDescriptor_TaskState = 3
	TaskDescriptor_RUNNING   TaskDescriptor_TaskState = 4
	TaskDescriptor_COMPLETED TaskDescriptor_TaskState = 5
	TaskDescriptor_FAILED    TaskDescriptor_TaskState = 6
	TaskDescriptor_ABORTED   TaskDescriptor_TaskState = 7
	TaskDescriptor_DELEGATED TaskDescriptor_TaskState = 8
	TaskDescriptor_UNKNOWN   TaskDescriptor_TaskState = 9
)

var TaskDescriptor_TaskState_name = map[int32]string{
	0: "CREATED",
	1: "BLOCKING",
	2: "RUNNABLE",
	3: "ASSIGNED",
	4: "RUNNING",
	5: "COMPLETED",
	6: "FAILED",
	7: "ABORTED",
	8: "DELEGATED",
	9: "UNKNOWN",
}
var TaskDescriptor_TaskState_value = map[string]int32{
	"CREATED":   0,
	"BLOCKING":  1,
	"RUNNABLE":  2,
	"ASSIGNED":  3,
	"RUNNING":   4,
	"COMPLETED": 5,
	"FAILED":    6,
	"ABORTED":   7,
	"DELEGATED": 8,
	"UNKNOWN":   9,
}

func (x TaskDescriptor_TaskState) Enum() *TaskDescriptor_TaskState {
	p := new(TaskDescriptor_TaskState)
	*p = x
	return p
}
func (x TaskDescriptor_TaskState) String() string {
	return proto.EnumName(TaskDescriptor_TaskState_name, int32(x))
}
func (x *TaskDescriptor_TaskState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TaskDescriptor_TaskState_value, data, "TaskDescriptor_TaskState")
	if err != nil {
		return err
	}
	*x = TaskDescriptor_TaskState(value)
	return nil
}
func (TaskDescriptor_TaskState) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{0, 0} }

type TaskDescriptor_TaskType int32

const (
	TaskDescriptor_SHEEP  TaskDescriptor_TaskType = 0
	TaskDescriptor_RABBIT TaskDescriptor_TaskType = 1
	TaskDescriptor_DEVIL  TaskDescriptor_TaskType = 2
	TaskDescriptor_TURTLE TaskDescriptor_TaskType = 3
)

var TaskDescriptor_TaskType_name = map[int32]string{
	0: "SHEEP",
	1: "RABBIT",
	2: "DEVIL",
	3: "TURTLE",
}
var TaskDescriptor_TaskType_value = map[string]int32{
	"SHEEP":  0,
	"RABBIT": 1,
	"DEVIL":  2,
	"TURTLE": 3,
}

func (x TaskDescriptor_TaskType) Enum() *TaskDescriptor_TaskType {
	p := new(TaskDescriptor_TaskType)
	*p = x
	return p
}
func (x TaskDescriptor_TaskType) String() string {
	return proto.EnumName(TaskDescriptor_TaskType_name, int32(x))
}
func (x *TaskDescriptor_TaskType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TaskDescriptor_TaskType_value, data, "TaskDescriptor_TaskType")
	if err != nil {
		return err
	}
	*x = TaskDescriptor_TaskType(value)
	return nil
}
func (TaskDescriptor_TaskType) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{0, 1} }

type TaskDescriptor struct {
	Uid   *uint64                   `protobuf:"varint,1,req,name=uid" json:"uid,omitempty"`
	Name  *string                   `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	State *TaskDescriptor_TaskState `protobuf:"varint,3,req,name=state,enum=sirius.TaskDescriptor_TaskState" json:"state,omitempty"`
	JobId *string                   `protobuf:"bytes,4,opt,name=job_id" json:"job_id,omitempty"`
	Index *uint64                   `protobuf:"varint,5,opt,name=index" json:"index,omitempty"`
	// Inputs/outputs
	Dependencies []*ReferenceDescriptor `protobuf:"bytes,6,rep,name=dependencies" json:"dependencies,omitempty"`
	Outputs      []*ReferenceDescriptor `protobuf:"bytes,7,rep,name=outputs" json:"outputs,omitempty"`
	// Command and arguments
	Binary []byte   `protobuf:"bytes,8,req,name=binary" json:"binary,omitempty"`
	Args   []string `protobuf:"bytes,9,rep,name=args" json:"args,omitempty"`
	// Children
	Spawned []*TaskDescriptor `protobuf:"bytes,10,rep,name=spawned" json:"spawned,omitempty"`
	// Runtime meta-data
	ScheduledToResource   *string `protobuf:"bytes,11,opt,name=scheduled_to_resource" json:"scheduled_to_resource,omitempty"`
	LastHeartbeatLocation *string `protobuf:"bytes,12,opt,name=last_heartbeat_location" json:"last_heartbeat_location,omitempty"`
	LastHeartbeatTime     *uint64 `protobuf:"varint,13,opt,name=last_heartbeat_time" json:"last_heartbeat_time,omitempty"`
	// Delegation info
	DelegatedTo   *string `protobuf:"bytes,14,opt,name=delegated_to" json:"delegated_to,omitempty"`
	DelegatedFrom *string `protobuf:"bytes,15,opt,name=delegated_from" json:"delegated_from,omitempty"`
	// Timestamps
	SubmitTime *uint64 `protobuf:"varint,16,opt,name=submit_time" json:"submit_time,omitempty"`
	StartTime  *uint64 `protobuf:"varint,17,opt,name=start_time" json:"start_time,omitempty"`
	FinishTime *uint64 `protobuf:"varint,18,opt,name=finish_time" json:"finish_time,omitempty"`
	// The total time spent unscheduled before previous runs.
	TotalUnscheduledTime *uint64 `protobuf:"varint,19,opt,name=total_unscheduled_time" json:"total_unscheduled_time,omitempty"`
	// The total time spent in previous runs. This field only gets updated when
	// the task finishes running.
	TotalRunTime *uint64 `protobuf:"varint,20,opt,name=total_run_time" json:"total_run_time,omitempty"`
	// Deadlines
	RelativeDeadline *uint64 `protobuf:"varint,21,opt,name=relative_deadline" json:"relative_deadline,omitempty"`
	AbsoluteDeadline *uint64 `protobuf:"varint,22,opt,name=absolute_deadline" json:"absolute_deadline,omitempty"`
	// TODO(malte): move these to sub-messages
	Port      *uint64 `protobuf:"varint,23,opt,name=port" json:"port,omitempty"`
	InputSize *uint64 `protobuf:"varint,24,opt,name=input_size" json:"input_size,omitempty"`
	// TaskLib related stuff
	InjectTaskLib *bool `protobuf:"varint,25,opt,name=inject_task_lib,def=0" json:"inject_task_lib,omitempty"`
	// Task resource request and priority
	ResourceRequest  *ResourceVector          `protobuf:"bytes,26,opt,name=resource_request" json:"resource_request,omitempty"`
	Priority         *uint32                  `protobuf:"varint,27,opt,name=priority" json:"priority,omitempty"`
	TaskType         *TaskDescriptor_TaskType `protobuf:"varint,28,opt,name=task_type,enum=sirius.TaskDescriptor_TaskType" json:"task_type,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *TaskDescriptor) Reset()                    { *m = TaskDescriptor{} }
func (m *TaskDescriptor) String() string            { return proto.CompactTextString(m) }
func (*TaskDescriptor) ProtoMessage()               {}
func (*TaskDescriptor) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

const Default_TaskDescriptor_InjectTaskLib bool = false

func (m *TaskDescriptor) GetUid() uint64 {
	if m != nil && m.Uid != nil {
		return *m.Uid
	}
	return 0
}

func (m *TaskDescriptor) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *TaskDescriptor) GetState() TaskDescriptor_TaskState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return TaskDescriptor_CREATED
}

func (m *TaskDescriptor) GetJobId() string {
	if m != nil && m.JobId != nil {
		return *m.JobId
	}
	return ""
}

func (m *TaskDescriptor) GetIndex() uint64 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *TaskDescriptor) GetDependencies() []*ReferenceDescriptor {
	if m != nil {
		return m.Dependencies
	}
	return nil
}

func (m *TaskDescriptor) GetOutputs() []*ReferenceDescriptor {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *TaskDescriptor) GetBinary() []byte {
	if m != nil {
		return m.Binary
	}
	return nil
}

func (m *TaskDescriptor) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *TaskDescriptor) GetSpawned() []*TaskDescriptor {
	if m != nil {
		return m.Spawned
	}
	return nil
}

func (m *TaskDescriptor) GetScheduledToResource() string {
	if m != nil && m.ScheduledToResource != nil {
		return *m.ScheduledToResource
	}
	return ""
}

func (m *TaskDescriptor) GetLastHeartbeatLocation() string {
	if m != nil && m.LastHeartbeatLocation != nil {
		return *m.LastHeartbeatLocation
	}
	return ""
}

func (m *TaskDescriptor) GetLastHeartbeatTime() uint64 {
	if m != nil && m.LastHeartbeatTime != nil {
		return *m.LastHeartbeatTime
	}
	return 0
}

func (m *TaskDescriptor) GetDelegatedTo() string {
	if m != nil && m.DelegatedTo != nil {
		return *m.DelegatedTo
	}
	return ""
}

func (m *TaskDescriptor) GetDelegatedFrom() string {
	if m != nil && m.DelegatedFrom != nil {
		return *m.DelegatedFrom
	}
	return ""
}

func (m *TaskDescriptor) GetSubmitTime() uint64 {
	if m != nil && m.SubmitTime != nil {
		return *m.SubmitTime
	}
	return 0
}

func (m *TaskDescriptor) GetStartTime() uint64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *TaskDescriptor) GetFinishTime() uint64 {
	if m != nil && m.FinishTime != nil {
		return *m.FinishTime
	}
	return 0
}

func (m *TaskDescriptor) GetTotalUnscheduledTime() uint64 {
	if m != nil && m.TotalUnscheduledTime != nil {
		return *m.TotalUnscheduledTime
	}
	return 0
}

func (m *TaskDescriptor) GetTotalRunTime() uint64 {
	if m != nil && m.TotalRunTime != nil {
		return *m.TotalRunTime
	}
	return 0
}

func (m *TaskDescriptor) GetRelativeDeadline() uint64 {
	if m != nil && m.RelativeDeadline != nil {
		return *m.RelativeDeadline
	}
	return 0
}

func (m *TaskDescriptor) GetAbsoluteDeadline() uint64 {
	if m != nil && m.AbsoluteDeadline != nil {
		return *m.AbsoluteDeadline
	}
	return 0
}

func (m *TaskDescriptor) GetPort() uint64 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

func (m *TaskDescriptor) GetInputSize() uint64 {
	if m != nil && m.InputSize != nil {
		return *m.InputSize
	}
	return 0
}

func (m *TaskDescriptor) GetInjectTaskLib() bool {
	if m != nil && m.InjectTaskLib != nil {
		return *m.InjectTaskLib
	}
	return Default_TaskDescriptor_InjectTaskLib
}

func (m *TaskDescriptor) GetResourceRequest() *ResourceVector {
	if m != nil {
		return m.ResourceRequest
	}
	return nil
}

func (m *TaskDescriptor) GetPriority() uint32 {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return 0
}

func (m *TaskDescriptor) GetTaskType() TaskDescriptor_TaskType {
	if m != nil && m.TaskType != nil {
		return *m.TaskType
	}
	return TaskDescriptor_SHEEP
}

func init() {
	proto.RegisterType((*TaskDescriptor)(nil), "sirius.TaskDescriptor")
	proto.RegisterEnum("sirius.TaskDescriptor_TaskState", TaskDescriptor_TaskState_name, TaskDescriptor_TaskState_value)
	proto.RegisterEnum("sirius.TaskDescriptor_TaskType", TaskDescriptor_TaskType_name, TaskDescriptor_TaskType_value)
}

func init() { proto.RegisterFile("task_desc.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 663 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x52, 0x5f, 0x53, 0xd3, 0x4e,
	0x14, 0xfd, 0x95, 0xfe, 0xcd, 0xb6, 0x94, 0xb2, 0x40, 0x59, 0xe0, 0xa7, 0x74, 0x78, 0x91, 0x07,
	0x07, 0xb5, 0x4f, 0x8e, 0x6f, 0x2d, 0x8d, 0xd8, 0xa1, 0xa6, 0x4c, 0x5a, 0xf0, 0x31, 0x93, 0x36,
	0xb7, 0xb0, 0x18, 0xb2, 0x71, 0x77, 0x83, 0xe2, 0xd7, 0xf0, 0x2b, 0xfa, 0x41, 0xbc, 0xbb, 0x6d,
	0xa5, 0x3a, 0x8e, 0xbe, 0x65, 0xcf, 0x39, 0x7b, 0x72, 0xee, 0xdd, 0x43, 0x36, 0x74, 0xa8, 0x3e,
	0x06, 0x11, 0xa8, 0xe9, 0x49, 0x2a, 0x85, 0x16, 0xb4, 0xa4, 0xb8, 0xe4, 0x99, 0xda, 0xdf, 0x96,
	0x30, 0x03, 0x09, 0xc9, 0x14, 0x56, 0xd8, 0xfd, 0x1d, 0x09, 0x4a, 0x64, 0x12, 0xc1, 0x7b, 0x98,
	0x6a, 0x21, 0x17, 0xf0, 0xae, 0x75, 0x99, 0xf1, 0x24, 0x8c, 0x03, 0x09, 0xa9, 0x90, 0x7a, 0x4e,
	0x1c, 0x7d, 0x2f, 0x93, 0xfa, 0x18, 0xb9, 0x1e, 0x5a, 0x48, 0x9e, 0xe2, 0x0d, 0x5a, 0x25, 0xf9,
	0x8c, 0x47, 0x2c, 0xd7, 0x5a, 0x3b, 0x2e, 0xd0, 0x1a, 0x29, 0x24, 0xe1, 0x1d, 0xb0, 0x35, 0x3c,
	0x39, 0xf4, 0x05, 0x29, 0x2a, 0x1d, 0x6a, 0x60, 0x79, 0x3c, 0xd6, 0xdb, 0xad, 0x93, 0x79, 0x96,
	0x93, 0x5f, 0x1d, 0xec, 0x71, 0x64, 0x74, 0xb4, 0x4e, 0x4a, 0xb7, 0x62, 0x12, 0xa0, 0x5d, 0xa1,
	0x95, 0x43, 0x83, 0x75, 0x52, 0xe4, 0x49, 0x04, 0x5f, 0x58, 0x11, 0x8f, 0x05, 0xfa, 0x8a, 0xd4,
	0x22, 0x48, 0x01, 0x91, 0x64, 0xca, 0x41, 0xb1, 0x52, 0x2b, 0x7f, 0x5c, 0x6d, 0x1f, 0x2c, 0x6d,
	0xfd, 0xe5, 0x84, 0x2b, 0xe9, 0x9e, 0x93, 0xb2, 0xc8, 0x74, 0x9a, 0x69, 0xc5, 0xca, 0xff, 0x56,
	0xe3, 0xff, 0x27, 0x38, 0xb4, 0x7c, 0x60, 0x15, 0x4c, 0x5c, 0x33, 0xe3, 0x84, 0xf2, 0x5a, 0x31,
	0x07, 0xaf, 0x3a, 0xf4, 0x19, 0x29, 0xab, 0x34, 0xfc, 0x9c, 0x40, 0xc4, 0x88, 0xf5, 0x6a, 0xfe,
	0x79, 0x20, 0xfa, 0x84, 0xec, 0xa8, 0xe9, 0x0d, 0x44, 0x59, 0x0c, 0x51, 0xa0, 0x45, 0xb0, 0x5c,
	0x32, 0xab, 0xda, 0xa9, 0x0e, 0xc9, 0x6e, 0x1c, 0x2a, 0x1d, 0xdc, 0x40, 0x28, 0xf5, 0x04, 0x42,
	0x1d, 0xc4, 0x62, 0x1a, 0x6a, 0x2e, 0x12, 0x56, 0xb3, 0x82, 0x03, 0xb2, 0xf5, 0x9b, 0x40, 0x73,
	0x5c, 0xea, 0xba, 0x5d, 0xc2, 0xb6, 0x59, 0x42, 0x0c, 0xd7, 0xb8, 0x2f, 0x63, 0xce, 0xea, 0xf6,
	0x4a, 0x93, 0xd4, 0x1f, 0xd1, 0x99, 0x14, 0x77, 0x6c, 0xc3, 0xe2, 0x5b, 0xa4, 0xaa, 0xb2, 0xc9,
	0x1d, 0x5f, 0x58, 0x34, 0xac, 0x05, 0x25, 0x04, 0xdf, 0x45, 0x2e, 0xb0, 0x4d, 0x8b, 0xa1, 0x10,
	0xdf, 0x9b, 0xab, 0x9b, 0x39, 0x48, 0x2d, 0xf8, 0x94, 0x34, 0xb5, 0xd0, 0x58, 0x82, 0x2c, 0x59,
	0x19, 0xc8, 0xf0, 0x5b, 0x96, 0xc7, 0xbf, 0xce, 0x79, 0x99, 0x25, 0x73, 0x7c, 0xdb, 0xe2, 0x7b,
	0x64, 0x53, 0x42, 0x8c, 0x23, 0xdd, 0x9b, 0xb6, 0x85, 0x51, 0xcc, 0x13, 0x60, 0x3b, 0x4b, 0x2a,
	0x9c, 0x28, 0x11, 0x67, 0x7a, 0x85, 0x6a, 0x5a, 0x0a, 0xb7, 0x6d, 0xaa, 0xc6, 0x76, 0x97, 0x21,
	0x79, 0x82, 0x0f, 0x17, 0x28, 0xfe, 0x15, 0x18, 0x5b, 0xe4, 0xd9, 0xe0, 0xc9, 0x2d, 0x36, 0x35,
	0xb0, 0x05, 0x8d, 0xf9, 0x84, 0xed, 0x21, 0x51, 0x79, 0x53, 0x9c, 0x85, 0xb1, 0x02, 0xfa, 0x92,
	0x34, 0x7e, 0x16, 0x5a, 0xc2, 0xa7, 0x0c, 0x94, 0x66, 0xfb, 0x28, 0x58, 0x79, 0x2a, 0x7f, 0xc1,
	0x5f, 0xd9, 0xbe, 0xd3, 0x06, 0xa9, 0xa4, 0x92, 0x0b, 0xc9, 0xf5, 0x03, 0x3b, 0x40, 0xe5, 0x3a,
	0x6d, 0x13, 0xc7, 0x9a, 0xeb, 0x87, 0x14, 0xd8, 0xff, 0x08, 0xd5, 0xdb, 0x87, 0x7f, 0x29, 0xee,
	0x18, 0x65, 0x47, 0xdf, 0x72, 0xc4, 0x79, 0x6c, 0x71, 0x95, 0x94, 0x4f, 0x7d, 0xb7, 0x33, 0x76,
	0x7b, 0x8d, 0xff, 0x70, 0xa8, 0x4a, 0x77, 0x30, 0x3c, 0x3d, 0xef, 0x7b, 0x67, 0x8d, 0x9c, 0x39,
	0xf9, 0x97, 0x9e, 0xd7, 0xe9, 0x0e, 0xdc, 0xc6, 0x9a, 0x39, 0x75, 0x46, 0xa3, 0xfe, 0x99, 0x87,
	0xca, 0xbc, 0xb9, 0x66, 0x38, 0x23, 0x2c, 0x60, 0xf3, 0x9d, 0xd3, 0xe1, 0xfb, 0x8b, 0x81, 0x6b,
	0x5c, 0x8a, 0xb8, 0x8b, 0xd2, 0xdb, 0x4e, 0x7f, 0x80, 0xdf, 0x25, 0xa3, 0xeb, 0x74, 0x87, 0xbe,
	0x21, 0xca, 0x46, 0xd7, 0x73, 0x07, 0xee, 0x99, 0xfd, 0x5b, 0xc5, 0x70, 0x97, 0xde, 0xb9, 0x37,
	0xfc, 0xe0, 0x35, 0x9c, 0xa3, 0xd7, 0xa4, 0xb2, 0x4c, 0x48, 0x1d, 0x52, 0x1c, 0xbd, 0x73, 0xdd,
	0x0b, 0x4c, 0x84, 0x5e, 0x7e, 0xa7, 0xdb, 0xed, 0x8f, 0x31, 0x0f, 0xc2, 0x3d, 0xf7, 0xaa, 0x3f,
	0xc0, 0x30, 0x08, 0x8f, 0x2f, 0xfd, 0x31, 0x06, 0xcb, 0xff, 0x08, 0x00, 0x00, 0xff, 0xff, 0x1c,
	0x6e, 0x60, 0x07, 0x46, 0x04, 0x00, 0x00,
}
