// Code generated by protoc-gen-go.
// source: machine_perf_statistics_sample.proto
// DO NOT EDIT!

package sirius

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MachinePerfStatisticsSample struct {
	ResourceId *string `protobuf:"bytes,1,req,name=resource_id" json:"resource_id,omitempty"`
	Timestamp  *uint64 `protobuf:"varint,2,req,name=timestamp" json:"timestamp,omitempty"`
	TotalRam   *uint64 `protobuf:"varint,3,req,name=total_ram" json:"total_ram,omitempty"`
	FreeRam    *uint64 `protobuf:"varint,4,req,name=free_ram" json:"free_ram,omitempty"`
	// The first entry is the cpu usage of cpu0 and so on.
	CpusUsage        []*CpuUsage `protobuf:"bytes,5,rep,name=cpus_usage" json:"cpus_usage,omitempty"`
	DiskBw           *uint64     `protobuf:"varint,6,opt,name=disk_bw,def=0" json:"disk_bw,omitempty"`
	NetBw            *uint64     `protobuf:"varint,7,opt,name=net_bw,def=0" json:"net_bw,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *MachinePerfStatisticsSample) Reset()                    { *m = MachinePerfStatisticsSample{} }
func (m *MachinePerfStatisticsSample) String() string            { return proto.CompactTextString(m) }
func (*MachinePerfStatisticsSample) ProtoMessage()               {}
func (*MachinePerfStatisticsSample) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

const Default_MachinePerfStatisticsSample_DiskBw uint64 = 0
const Default_MachinePerfStatisticsSample_NetBw uint64 = 0

func (m *MachinePerfStatisticsSample) GetResourceId() string {
	if m != nil && m.ResourceId != nil {
		return *m.ResourceId
	}
	return ""
}

func (m *MachinePerfStatisticsSample) GetTimestamp() uint64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *MachinePerfStatisticsSample) GetTotalRam() uint64 {
	if m != nil && m.TotalRam != nil {
		return *m.TotalRam
	}
	return 0
}

func (m *MachinePerfStatisticsSample) GetFreeRam() uint64 {
	if m != nil && m.FreeRam != nil {
		return *m.FreeRam
	}
	return 0
}

func (m *MachinePerfStatisticsSample) GetCpusUsage() []*CpuUsage {
	if m != nil {
		return m.CpusUsage
	}
	return nil
}

func (m *MachinePerfStatisticsSample) GetDiskBw() uint64 {
	if m != nil && m.DiskBw != nil {
		return *m.DiskBw
	}
	return Default_MachinePerfStatisticsSample_DiskBw
}

func (m *MachinePerfStatisticsSample) GetNetBw() uint64 {
	if m != nil && m.NetBw != nil {
		return *m.NetBw
	}
	return Default_MachinePerfStatisticsSample_NetBw
}

type CpuUsage struct {
	User             *float64 `protobuf:"fixed64,1,opt,name=user" json:"user,omitempty"`
	Nice             *float64 `protobuf:"fixed64,2,opt,name=nice" json:"nice,omitempty"`
	System           *float64 `protobuf:"fixed64,3,opt,name=system" json:"system,omitempty"`
	Idle             *float64 `protobuf:"fixed64,4,opt,name=idle" json:"idle,omitempty"`
	Iowait           *float64 `protobuf:"fixed64,5,opt,name=iowait" json:"iowait,omitempty"`
	Irq              *float64 `protobuf:"fixed64,6,opt,name=irq" json:"irq,omitempty"`
	SoftIrq          *float64 `protobuf:"fixed64,7,opt,name=soft_irq" json:"soft_irq,omitempty"`
	Steal            *float64 `protobuf:"fixed64,8,opt,name=steal" json:"steal,omitempty"`
	Guest            *float64 `protobuf:"fixed64,9,opt,name=guest" json:"guest,omitempty"`
	GuestNice        *float64 `protobuf:"fixed64,10,opt,name=guest_nice" json:"guest_nice,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CpuUsage) Reset()                    { *m = CpuUsage{} }
func (m *CpuUsage) String() string            { return proto.CompactTextString(m) }
func (*CpuUsage) ProtoMessage()               {}
func (*CpuUsage) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *CpuUsage) GetUser() float64 {
	if m != nil && m.User != nil {
		return *m.User
	}
	return 0
}

func (m *CpuUsage) GetNice() float64 {
	if m != nil && m.Nice != nil {
		return *m.Nice
	}
	return 0
}

func (m *CpuUsage) GetSystem() float64 {
	if m != nil && m.System != nil {
		return *m.System
	}
	return 0
}

func (m *CpuUsage) GetIdle() float64 {
	if m != nil && m.Idle != nil {
		return *m.Idle
	}
	return 0
}

func (m *CpuUsage) GetIowait() float64 {
	if m != nil && m.Iowait != nil {
		return *m.Iowait
	}
	return 0
}

func (m *CpuUsage) GetIrq() float64 {
	if m != nil && m.Irq != nil {
		return *m.Irq
	}
	return 0
}

func (m *CpuUsage) GetSoftIrq() float64 {
	if m != nil && m.SoftIrq != nil {
		return *m.SoftIrq
	}
	return 0
}

func (m *CpuUsage) GetSteal() float64 {
	if m != nil && m.Steal != nil {
		return *m.Steal
	}
	return 0
}

func (m *CpuUsage) GetGuest() float64 {
	if m != nil && m.Guest != nil {
		return *m.Guest
	}
	return 0
}

func (m *CpuUsage) GetGuestNice() float64 {
	if m != nil && m.GuestNice != nil {
		return *m.GuestNice
	}
	return 0
}

func init() {
	proto.RegisterType((*MachinePerfStatisticsSample)(nil), "sirius.MachinePerfStatisticsSample")
	proto.RegisterType((*CpuUsage)(nil), "sirius.CpuUsage")
}

func init() { proto.RegisterFile("machine_perf_statistics_sample.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 289 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x3c, 0x90, 0xcf, 0x4e, 0x02, 0x31,
	0x10, 0x87, 0x53, 0x58, 0x16, 0x18, 0xd4, 0x60, 0xbd, 0x34, 0xf1, 0x42, 0x08, 0x87, 0x3d, 0x11,
	0xe3, 0xd1, 0xab, 0x67, 0x13, 0x13, 0xe2, 0xb9, 0xa9, 0xcb, 0x80, 0x13, 0x77, 0x69, 0xed, 0xb4,
	0x21, 0x3e, 0x90, 0xcf, 0xe0, 0xeb, 0xd9, 0x16, 0xe4, 0xf8, 0xfb, 0xe6, 0xdf, 0xd7, 0xc2, 0xaa,
	0x37, 0xed, 0x07, 0x1d, 0x50, 0x3b, 0xf4, 0x3b, 0xcd, 0xc1, 0x04, 0xe2, 0x40, 0x2d, 0x6b, 0x36,
	0xbd, 0xeb, 0x70, 0xed, 0xbc, 0x0d, 0x56, 0xd6, 0x4c, 0x9e, 0x22, 0x2f, 0x7f, 0x05, 0xdc, 0xbf,
	0x9c, 0x06, 0x5e, 0x53, 0xff, 0xe6, 0xd2, 0xbe, 0x29, 0xdd, 0xf2, 0x0e, 0x66, 0x1e, 0xd9, 0x46,
	0xdf, 0xa2, 0xa6, 0xad, 0x12, 0x8b, 0x41, 0x33, 0x95, 0xb7, 0x30, 0x0d, 0xd4, 0x63, 0xda, 0xdd,
	0x3b, 0x35, 0x48, 0xa8, 0x2a, 0xc8, 0x06, 0xd3, 0x69, 0x6f, 0x7a, 0x35, 0x2c, 0x68, 0x0e, 0x93,
	0x9d, 0x47, 0x2c, 0xa4, 0x2a, 0x64, 0x05, 0xd0, 0xba, 0xc8, 0x3a, 0xb2, 0xd9, 0xa3, 0x1a, 0x2d,
	0x86, 0xcd, 0xec, 0x71, 0xbe, 0x3e, 0x99, 0xac, 0x9f, 0x5d, 0x7c, 0xcb, 0x5c, 0x4a, 0x18, 0x6f,
	0x89, 0x3f, 0xf5, 0xfb, 0x51, 0xd5, 0x0b, 0xd1, 0x54, 0x4f, 0xe2, 0x21, 0xad, 0xaf, 0x0f, 0x18,
	0x32, 0x1a, 0x9f, 0xd1, 0xf2, 0x47, 0xc0, 0xe4, 0x32, 0x73, 0x05, 0x55, 0x64, 0xf4, 0xc9, 0x4f,
	0x34, 0x22, 0xa7, 0x03, 0xb5, 0x98, 0xd4, 0x72, 0xba, 0x81, 0x9a, 0xbf, 0x39, 0x60, 0xf6, 0x3a,
	0x57, 0x69, 0xdb, 0x61, 0x72, 0x3a, 0x57, 0xc9, 0x1e, 0x0d, 0x85, 0xe4, 0x93, 0xf3, 0x0c, 0x86,
	0xe4, 0xbf, 0xca, 0x65, 0x91, 0x9f, 0xc0, 0x76, 0x17, 0x74, 0x26, 0xe3, 0x42, 0xae, 0x61, 0x94,
	0x56, 0x99, 0x4e, 0x4d, 0xfe, 0xe3, 0x3e, 0xa6, 0x8f, 0x50, 0xd3, 0x12, 0x25, 0x40, 0x89, 0xba,
	0x9c, 0x87, 0xcc, 0xfe, 0x02, 0x00, 0x00, 0xff, 0xff, 0x13, 0xd5, 0xba, 0xcf, 0x90, 0x01, 0x00,
	0x00,
}
