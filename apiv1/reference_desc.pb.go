// Code generated by protoc-gen-go.
// source: reference_desc.proto
// DO NOT EDIT!

package sirius

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ReferenceDescriptor_ReferenceType int32

const (
	ReferenceDescriptor_TOMBSTONE ReferenceDescriptor_ReferenceType = 0
	ReferenceDescriptor_FUTURE    ReferenceDescriptor_ReferenceType = 1
	ReferenceDescriptor_CONCRETE  ReferenceDescriptor_ReferenceType = 2
	ReferenceDescriptor_STREAM    ReferenceDescriptor_ReferenceType = 3
	ReferenceDescriptor_VALUE     ReferenceDescriptor_ReferenceType = 4
	ReferenceDescriptor_ERROR     ReferenceDescriptor_ReferenceType = 5
)

var ReferenceDescriptor_ReferenceType_name = map[int32]string{
	0: "TOMBSTONE",
	1: "FUTURE",
	2: "CONCRETE",
	3: "STREAM",
	4: "VALUE",
	5: "ERROR",
}
var ReferenceDescriptor_ReferenceType_value = map[string]int32{
	"TOMBSTONE": 0,
	"FUTURE":    1,
	"CONCRETE":  2,
	"STREAM":    3,
	"VALUE":     4,
	"ERROR":     5,
}

func (x ReferenceDescriptor_ReferenceType) Enum() *ReferenceDescriptor_ReferenceType {
	p := new(ReferenceDescriptor_ReferenceType)
	*p = x
	return p
}
func (x ReferenceDescriptor_ReferenceType) String() string {
	return proto.EnumName(ReferenceDescriptor_ReferenceType_name, int32(x))
}
func (x *ReferenceDescriptor_ReferenceType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ReferenceDescriptor_ReferenceType_value, data, "ReferenceDescriptor_ReferenceType")
	if err != nil {
		return err
	}
	*x = ReferenceDescriptor_ReferenceType(value)
	return nil
}
func (ReferenceDescriptor_ReferenceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor4, []int{0, 0}
}

type ReferenceDescriptor_ReferenceScope int32

const (
	// TODO(malte): really encode like this?
	ReferenceDescriptor_PUBLIC  ReferenceDescriptor_ReferenceScope = 0
	ReferenceDescriptor_PRIVATE ReferenceDescriptor_ReferenceScope = 1
)

var ReferenceDescriptor_ReferenceScope_name = map[int32]string{
	0: "PUBLIC",
	1: "PRIVATE",
}
var ReferenceDescriptor_ReferenceScope_value = map[string]int32{
	"PUBLIC":  0,
	"PRIVATE": 1,
}

func (x ReferenceDescriptor_ReferenceScope) Enum() *ReferenceDescriptor_ReferenceScope {
	p := new(ReferenceDescriptor_ReferenceScope)
	*p = x
	return p
}
func (x ReferenceDescriptor_ReferenceScope) String() string {
	return proto.EnumName(ReferenceDescriptor_ReferenceScope_name, int32(x))
}
func (x *ReferenceDescriptor_ReferenceScope) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ReferenceDescriptor_ReferenceScope_value, data, "ReferenceDescriptor_ReferenceScope")
	if err != nil {
		return err
	}
	*x = ReferenceDescriptor_ReferenceScope(value)
	return nil
}
func (ReferenceDescriptor_ReferenceScope) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor4, []int{0, 1}
}

type ReferenceDescriptor struct {
	Id               []byte                              `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Type             *ReferenceDescriptor_ReferenceType  `protobuf:"varint,2,req,name=type,enum=sirius.ReferenceDescriptor_ReferenceType" json:"type,omitempty"`
	Scope            *ReferenceDescriptor_ReferenceScope `protobuf:"varint,3,opt,name=scope,enum=sirius.ReferenceDescriptor_ReferenceScope,def=0" json:"scope,omitempty"`
	NonDeterministic *bool                               `protobuf:"varint,4,opt,name=non_deterministic,def=1" json:"non_deterministic,omitempty"`
	Size             *uint64                             `protobuf:"varint,5,opt,name=size" json:"size,omitempty"`
	Location         *string                             `protobuf:"bytes,6,opt,name=location" json:"location,omitempty"`
	InlineData       []byte                              `protobuf:"bytes,7,opt,name=inline_data" json:"inline_data,omitempty"`
	ProducingTask    *uint64                             `protobuf:"varint,8,opt,name=producing_task" json:"producing_task,omitempty"`
	TimeToCompute    *uint64                             `protobuf:"varint,9,opt,name=time_to_compute" json:"time_to_compute,omitempty"`
	Version          *uint64                             `protobuf:"varint,10,opt,name=version" json:"version,omitempty"`
	// Modifications for storage engine
	IsModified       *bool  `protobuf:"varint,11,opt,name=is_modified" json:"is_modified,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ReferenceDescriptor) Reset()                    { *m = ReferenceDescriptor{} }
func (m *ReferenceDescriptor) String() string            { return proto.CompactTextString(m) }
func (*ReferenceDescriptor) ProtoMessage()               {}
func (*ReferenceDescriptor) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

const Default_ReferenceDescriptor_Scope ReferenceDescriptor_ReferenceScope = ReferenceDescriptor_PUBLIC
const Default_ReferenceDescriptor_NonDeterministic bool = true

func (m *ReferenceDescriptor) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ReferenceDescriptor) GetType() ReferenceDescriptor_ReferenceType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ReferenceDescriptor_TOMBSTONE
}

func (m *ReferenceDescriptor) GetScope() ReferenceDescriptor_ReferenceScope {
	if m != nil && m.Scope != nil {
		return *m.Scope
	}
	return Default_ReferenceDescriptor_Scope
}

func (m *ReferenceDescriptor) GetNonDeterministic() bool {
	if m != nil && m.NonDeterministic != nil {
		return *m.NonDeterministic
	}
	return Default_ReferenceDescriptor_NonDeterministic
}

func (m *ReferenceDescriptor) GetSize() uint64 {
	if m != nil && m.Size != nil {
		return *m.Size
	}
	return 0
}

func (m *ReferenceDescriptor) GetLocation() string {
	if m != nil && m.Location != nil {
		return *m.Location
	}
	return ""
}

func (m *ReferenceDescriptor) GetInlineData() []byte {
	if m != nil {
		return m.InlineData
	}
	return nil
}

func (m *ReferenceDescriptor) GetProducingTask() uint64 {
	if m != nil && m.ProducingTask != nil {
		return *m.ProducingTask
	}
	return 0
}

func (m *ReferenceDescriptor) GetTimeToCompute() uint64 {
	if m != nil && m.TimeToCompute != nil {
		return *m.TimeToCompute
	}
	return 0
}

func (m *ReferenceDescriptor) GetVersion() uint64 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *ReferenceDescriptor) GetIsModified() bool {
	if m != nil && m.IsModified != nil {
		return *m.IsModified
	}
	return false
}

func init() {
	proto.RegisterType((*ReferenceDescriptor)(nil), "sirius.ReferenceDescriptor")
	proto.RegisterEnum("sirius.ReferenceDescriptor_ReferenceType", ReferenceDescriptor_ReferenceType_name, ReferenceDescriptor_ReferenceType_value)
	proto.RegisterEnum("sirius.ReferenceDescriptor_ReferenceScope", ReferenceDescriptor_ReferenceScope_name, ReferenceDescriptor_ReferenceScope_value)
}

func init() { proto.RegisterFile("reference_desc.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 361 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x90, 0x31, 0x8f, 0xd3, 0x30,
	0x1c, 0xc5, 0x49, 0x9a, 0xa4, 0xc9, 0xbf, 0xbd, 0x5e, 0xf0, 0x21, 0xf0, 0xc6, 0xa9, 0x13, 0xc7,
	0xd0, 0x81, 0x05, 0xe9, 0xb6, 0xb4, 0x04, 0xa9, 0x52, 0xdb, 0x54, 0x6e, 0xd2, 0x81, 0x25, 0x8a,
	0x12, 0x17, 0x59, 0x34, 0x76, 0x64, 0x3b, 0x48, 0xf0, 0x2d, 0xf9, 0x46, 0xfc, 0xd3, 0x0a, 0xa1,
	0x4a, 0x0c, 0x6c, 0xf6, 0x7b, 0xfe, 0x3d, 0x3d, 0x3f, 0x78, 0xa5, 0xf9, 0x89, 0x6b, 0x2e, 0x6b,
	0x5e, 0x36, 0xdc, 0xd4, 0x8b, 0x4e, 0x2b, 0xab, 0x48, 0x60, 0x84, 0x16, 0xbd, 0x99, 0xff, 0x1a,
	0xc1, 0x03, 0xfb, 0xf3, 0xe0, 0x13, 0xfa, 0x5a, 0x74, 0x56, 0x69, 0x02, 0xe0, 0x8a, 0x86, 0x3a,
	0x8f, 0xee, 0xbb, 0x29, 0xf9, 0x08, 0x9e, 0xfd, 0xd1, 0x71, 0xea, 0xe2, 0x6d, 0xf6, 0xe1, 0x69,
	0x71, 0x45, 0x17, 0xff, 0xc0, 0xfe, 0x6a, 0x39, 0x02, 0x24, 0x01, 0xdf, 0xd4, 0x0a, 0xc9, 0xd1,
	0xa3, 0x83, 0xe4, 0xfb, 0xff, 0x22, 0x0f, 0x03, 0xf1, 0x1c, 0xec, 0x8b, 0xe5, 0x66, 0xbd, 0x22,
	0x6f, 0xe1, 0xa5, 0x54, 0x12, 0x9b, 0x5b, 0xae, 0x5b, 0x21, 0x85, 0xb1, 0xa2, 0xa6, 0x1e, 0xc6,
	0x85, 0xcf, 0x9e, 0xd5, 0x3d, 0x27, 0x53, 0xf0, 0x8c, 0xf8, 0xc9, 0xa9, 0x8f, 0x9a, 0x47, 0x62,
	0x08, 0xcf, 0xaa, 0xae, 0xac, 0x50, 0x92, 0x06, 0xa8, 0x44, 0xe4, 0x01, 0x26, 0x42, 0x9e, 0x85,
	0xc4, 0xdf, 0x57, 0xb6, 0xa2, 0x63, 0x14, 0xa7, 0xe4, 0x35, 0xcc, 0x70, 0x86, 0xa6, 0xaf, 0x85,
	0xfc, 0x5a, 0xda, 0xca, 0x7c, 0xa3, 0xe1, 0x05, 0x7f, 0x03, 0xf7, 0x56, 0xb4, 0xbc, 0xb4, 0xaa,
	0xac, 0x55, 0xdb, 0xf5, 0x96, 0xd3, 0xe8, 0x62, 0xdc, 0xc3, 0xf8, 0x3b, 0xd7, 0x66, 0x88, 0x85,
	0x8b, 0x30, 0xc4, 0x9a, 0xb2, 0x55, 0x8d, 0x38, 0x09, 0xde, 0xd0, 0xc9, 0xd0, 0x68, 0xfe, 0x05,
	0xee, 0x6e, 0x07, 0xb8, 0x83, 0x28, 0xcf, 0xb6, 0xcb, 0x43, 0x9e, 0xed, 0xd2, 0xf8, 0x05, 0x8e,
	0x1a, 0x7c, 0x2e, 0xf2, 0x82, 0xa5, 0xb1, 0x83, 0xbd, 0xc3, 0x55, 0xb6, 0x5b, 0xb1, 0x34, 0x4f,
	0x63, 0x77, 0x70, 0x0e, 0x39, 0x4b, 0x93, 0x6d, 0x3c, 0x22, 0x11, 0xf8, 0xc7, 0x64, 0x53, 0xa4,
	0xb1, 0x37, 0x1c, 0x53, 0xc6, 0x32, 0x16, 0xfb, 0xf3, 0x27, 0x98, 0xdd, 0x4e, 0x34, 0x30, 0xd7,
	0x91, 0x30, 0x79, 0x02, 0xe3, 0x3d, 0x5b, 0x1f, 0x13, 0x0c, 0x73, 0x7e, 0x07, 0x00, 0x00, 0xff,
	0xff, 0x49, 0x4a, 0x3a, 0xab, 0xf2, 0x01, 0x00, 0x00,
}
